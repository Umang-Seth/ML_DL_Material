{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "20b10a26",
   "metadata": {},
   "source": [
    "### Q1. Given a number N find the sum of all even valued terms in the fibonacci sequence less than equal to N."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "f4ceb586",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter No. N = 10\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "n=int(input('Enter No. N = '))\n",
    "a=0\n",
    "b=1\n",
    "fib=[]\n",
    "sum=0\n",
    "\n",
    "for i in range(1,n-1):\n",
    "    c=a+b\n",
    "    a=b\n",
    "    b=c\n",
    "    if c%2==0:\n",
    "        fib.append(c)\n",
    "#print(fib)\n",
    "for i in range (len(fib)):\n",
    "    if fib[i]<=n:\n",
    "        sum=sum+fib[i]\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8dab2b1b",
   "metadata": {},
   "source": [
    "### Q2. Print the following pattern for given no. of rows \n",
    "        Input:5\n",
    "        Output:1\n",
    "               3 2\n",
    "               4 5 6\n",
    "               10 9 8 7\n",
    "               11 12 13 14 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "201f18ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of Rows : 5\n",
      "1 \n",
      "2 3 \n",
      "4 5 6 \n",
      "7 8 9 10 \n",
      "11 12 13 14 15 \n"
     ]
    }
   ],
   "source": [
    "n = int(input('No. of Rows : '))\n",
    "a=1\n",
    "count=0\n",
    "for i in range(0, n):\n",
    "    for j in range(0, i + 1):  \n",
    "        print(a, end=\" \")\n",
    "        a=a+1\n",
    "        count=+1\n",
    "    print()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "162c4734",
   "metadata": {},
   "source": [
    "### Q3. Convert a decimal No.(N) to Binary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "618bb000",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Decimal No. : 17\n",
      "1 0 0 0 1 "
     ]
    }
   ],
   "source": [
    "n = int(input('Enter Decimal No. : '))\n",
    "binary=[]\n",
    "\n",
    "while n>0:\n",
    "    binary.append(int(n%2))\n",
    "    if n%2==0:\n",
    "        n=n/2\n",
    "    else:\n",
    "        n=(n-1)/2\n",
    "#print(binary)\n",
    "for o in reversed(binary):\n",
    "    print(o,end=\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceab0320",
   "metadata": {},
   "source": [
    "### Q4. Given an integer N, print all the prime numbers that lie in the range 2 to N (both inclusive)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "7104a75f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter N : 11\n",
      "11\n",
      "7\n",
      "5\n",
      "3\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "n = int(input('Enter N : '))\n",
    "\n",
    "def prime(n):\n",
    "    for i in range(2, n):\n",
    "        if (n % i == 0):\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "while n>1:\n",
    "    if prime(n):\n",
    "        print(n)\n",
    "        n=n-1\n",
    "    else:\n",
    "        n=n-1\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d283de3a",
   "metadata": {},
   "source": [
    "### Q5. Find and return number of trailing 0's in N factorial without calculating N factorial."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "aa3af4cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter N : 16\n",
      "Number of trailing 0's in 16 is 3\n"
     ]
    }
   ],
   "source": [
    "n = int(input('Enter N : '))\n",
    "\n",
    "print(\"Number of trailing 0's in\",n,'is',n//5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "202c95fe",
   "metadata": {},
   "source": [
    "### Q6. Aadil has been provided with a sentence in the form of a string as a function parameter. The task is to implement a function so as to print the sentence such that each word in the sentence is reversed.\n",
    "    Input:\"Hello, I am Umang\"\n",
    "    Output:\",olleH I ma gnamU\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "688d620c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Write a sentence : Hello, My name is Umang.\n",
      ",olleH yM eman si .gnamU "
     ]
    }
   ],
   "source": [
    "txt = input('Write a sentence : ')\n",
    "\n",
    "arr=txt.split(' ')\n",
    "#print(arr)\n",
    "\n",
    "for i in range(len(arr)):\n",
    "    ans=arr[i][::-1]\n",
    "    print(ans, end=\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42c081c1",
   "metadata": {},
   "source": [
    "### Q7. Check if given Number is an Armstrong Number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "16815dd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter N : 153\n",
      "153 is an Armstrong Number\n"
     ]
    }
   ],
   "source": [
    "n = input('Enter N : ')\n",
    "\n",
    "lst=list(n)\n",
    "ans = []\n",
    "sum=0\n",
    "\n",
    "for i in range(len(lst)):\n",
    "    sum = sum+(int(lst[i])**len(lst))\n",
    "#print(sum)    \n",
    "\n",
    "if sum==int(n):\n",
    "    print(n,'is an Armstrong Number')\n",
    "else:\n",
    "    print(n,'is not an Armstrong Number')   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0cbd663",
   "metadata": {},
   "source": [
    "### Q8. Program to Solve Tower of Hanoi with N number of disks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "6a032284",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter N : 3\n",
      "Move disk 1 from source A to destination B\n",
      "Move disk 2 from source A to destination C\n",
      "Move disk 1 from source B to destination C\n",
      "Move disk 3 from source A to destination B\n",
      "Move disk 1 from source C to destination A\n",
      "Move disk 2 from source C to destination B\n",
      "Move disk 1 from source A to destination B\n"
     ]
    }
   ],
   "source": [
    "n = int(input('Enter N : '))\n",
    "\n",
    "def Tower(n , s, d, a):\n",
    "    if n==1:\n",
    "        print (\"Move disk 1 from source\",s,\"to destination\",d)\n",
    "        return\n",
    "    Tower(n-1, s, a, d)\n",
    "    print (\"Move disk\",n,\"from source\",s,\"to destination\",d)\n",
    "    Tower(n-1, a, d, s)\n",
    "\n",
    "Tower(n,'A','B','C')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "535d347c",
   "metadata": {},
   "source": [
    "### Q9. To Implement Bubble sort program."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "3b4acc20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Number of term top be sorted : 5\n",
      "Enter the number to be sorted5\n",
      "Enter the number to be sorted3\n",
      "Enter the number to be sorted1\n",
      "Enter the number to be sorted4\n",
      "Enter the number to be sorted6\n",
      "[1, 3, 4, 5, 6]\n"
     ]
    }
   ],
   "source": [
    "n = int(input('Enter Number of term top be sorted : '))\n",
    "arr=[]\n",
    "\n",
    "for i in range(n):\n",
    "    arr.append(int(input('Enter the number to be sorted')))\n",
    "\n",
    "def bubble(arr):  \n",
    "    for i in range(0,len(arr)-1):  \n",
    "        for j in range(len(arr)-1):  \n",
    "            if(arr[j] > arr[j+1]):   \n",
    "                arr[j], arr[j+1] = arr[j+1], arr[j]  \n",
    "    return arr \n",
    "\n",
    "print(bubble(arr))\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6fb6f94",
   "metadata": {},
   "source": [
    "### Q10. To Implement Linear and Binary Search Program."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "90ecc019",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number to be searched : 0\n",
      "Index of 0 is 1\n"
     ]
    }
   ],
   "source": [
    "lst = [9,0,2,6,4,5,7,3,8,1]\n",
    "n = int(input('Enter number to be searched : '))\n",
    "\n",
    "\n",
    "for i in range(0,len(lst)):\n",
    "    if lst[i]==n:\n",
    "        print('Index of' ,n, 'is' ,i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "2a51943e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n",
      "Element is present at index 9\n"
     ]
    }
   ],
   "source": [
    "arr = [9,0,2,6,4,5,7,3,8,1]\n",
    "arr.sort()\n",
    "x = int(input())\n",
    "\n",
    "def binary_search(arr, low, high, x):\n",
    "    if high >= low:\n",
    "        mid = (high + low) // 2\n",
    "        if arr[mid] == x:\n",
    "            return mid\n",
    "        elif arr[mid] > x:\n",
    "            return binary_search(arr, low, mid - 1, x)\n",
    "        else:\n",
    "            return binary_search(arr, mid + 1, high, x)\n",
    "    else:\n",
    "        return -1\n",
    "\n",
    "result = binary_search(arr, 0, len(arr)-1, x)\n",
    "\n",
    "print(\"Element is present at index\", result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5db5b028",
   "metadata": {},
   "source": [
    "### Q11. Find distance between 2 points using sqrt function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "d2bced54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter x1 : 1\n",
      "Enter y1 : 1\n",
      "Enter x2 : 2\n",
      "Enter y2 : 2\n",
      "1.4142135623730951\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "x1 = int(input('Enter x1 : '))\n",
    "y1 = int(input('Enter y1 : '))\n",
    "x2 = int(input('Enter x2 : '))\n",
    "y2 = int(input('Enter y2 : '))\n",
    "\n",
    "ans = math.sqrt((x1-x2)**2+(y1-y2)**2)\n",
    "print(ans)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99ece907",
   "metadata": {},
   "source": [
    "### Q12. Use Panda Library Function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "6676dd77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>low</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>med</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>high</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>med</td>\n",
       "      <td>low</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>med</td>\n",
       "      <td>med</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       0      1  2  3      4     5      6\n",
       "0  vhigh  vhigh  2  2  small   low  unacc\n",
       "1  vhigh  vhigh  2  2  small   med  unacc\n",
       "2  vhigh  vhigh  2  2  small  high  unacc\n",
       "3  vhigh  vhigh  2  2    med   low  unacc\n",
       "4  vhigh  vhigh  2  2    med   med  unacc"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "path = \"https://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data\"\n",
    "\n",
    "df = pd.read_csv(path,header=None)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "9a1ab390",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1723</th>\n",
       "      <td>low</td>\n",
       "      <td>low</td>\n",
       "      <td>5more</td>\n",
       "      <td>more</td>\n",
       "      <td>med</td>\n",
       "      <td>med</td>\n",
       "      <td>good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1724</th>\n",
       "      <td>low</td>\n",
       "      <td>low</td>\n",
       "      <td>5more</td>\n",
       "      <td>more</td>\n",
       "      <td>med</td>\n",
       "      <td>high</td>\n",
       "      <td>vgood</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1725</th>\n",
       "      <td>low</td>\n",
       "      <td>low</td>\n",
       "      <td>5more</td>\n",
       "      <td>more</td>\n",
       "      <td>big</td>\n",
       "      <td>low</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1726</th>\n",
       "      <td>low</td>\n",
       "      <td>low</td>\n",
       "      <td>5more</td>\n",
       "      <td>more</td>\n",
       "      <td>big</td>\n",
       "      <td>med</td>\n",
       "      <td>good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1727</th>\n",
       "      <td>low</td>\n",
       "      <td>low</td>\n",
       "      <td>5more</td>\n",
       "      <td>more</td>\n",
       "      <td>big</td>\n",
       "      <td>high</td>\n",
       "      <td>vgood</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0    1      2     3    4     5      6\n",
       "1723  low  low  5more  more  med   med   good\n",
       "1724  low  low  5more  more  med  high  vgood\n",
       "1725  low  low  5more  more  big   low  unacc\n",
       "1726  low  low  5more  more  big   med   good\n",
       "1727  low  low  5more  more  big  high  vgood"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "22be63c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12096\n",
      "(1728, 7)\n",
      "0    object\n",
      "1    object\n",
      "2    object\n",
      "3    object\n",
      "4    object\n",
      "5    object\n",
      "6    object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(df.size)\n",
    "print(df.shape)\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "a4771b81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "      <th>f</th>\n",
       "      <th>g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>low</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>med</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>high</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>med</td>\n",
       "      <td>low</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>med</td>\n",
       "      <td>med</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       a      b  c  d      e     f      g\n",
       "0  vhigh  vhigh  2  2  small   low  unacc\n",
       "1  vhigh  vhigh  2  2  small   med  unacc\n",
       "2  vhigh  vhigh  2  2  small  high  unacc\n",
       "3  vhigh  vhigh  2  2    med   low  unacc\n",
       "4  vhigh  vhigh  2  2    med   med  unacc"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns = ['a','b','c','d','e','f','g']\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "6905d686",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    c  d\n",
       "56  4  2\n",
       "57  4  2\n",
       "58  4  2"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[56:59,2:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "fbd4b583",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "      <th>f</th>\n",
       "      <th>g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>low</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>med</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>small</td>\n",
       "      <td>high</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>med</td>\n",
       "      <td>low</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>med</td>\n",
       "      <td>high</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       a      b  c  d      e     f      g\n",
       "0  vhigh  vhigh  2  2  small   low  unacc\n",
       "1  vhigh  vhigh  2  2  small   med  unacc\n",
       "2  vhigh  vhigh  2  2  small  high  unacc\n",
       "3  vhigh  vhigh  2  2    med   low  unacc\n",
       "5  vhigh  vhigh  2  2    med  high  unacc"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s=df.drop(4)\n",
    "s.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "bd0fb1b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "      <th>f</th>\n",
       "      <th>g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1728</td>\n",
       "      <td>1728</td>\n",
       "      <td>1728</td>\n",
       "      <td>1728</td>\n",
       "      <td>1728</td>\n",
       "      <td>1728</td>\n",
       "      <td>1728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>4</td>\n",
       "      <td>more</td>\n",
       "      <td>small</td>\n",
       "      <td>med</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>432</td>\n",
       "      <td>432</td>\n",
       "      <td>432</td>\n",
       "      <td>576</td>\n",
       "      <td>576</td>\n",
       "      <td>576</td>\n",
       "      <td>1210</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            a      b     c     d      e     f      g\n",
       "count    1728   1728  1728  1728   1728  1728   1728\n",
       "unique      4      4     4     3      3     3      4\n",
       "top     vhigh  vhigh     4  more  small   med  unacc\n",
       "freq      432    432   432   576    576   576   1210"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "f45c36ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1728 entries, 0 to 1727\n",
      "Data columns (total 7 columns):\n",
      " #   Column  Non-Null Count  Dtype \n",
      "---  ------  --------------  ----- \n",
      " 0   a       1728 non-null   object\n",
      " 1   b       1728 non-null   object\n",
      " 2   c       1728 non-null   object\n",
      " 3   d       1728 non-null   object\n",
      " 4   e       1728 non-null   object\n",
      " 5   f       1728 non-null   object\n",
      " 6   g       1728 non-null   object\n",
      "dtypes: object(7)\n",
      "memory usage: 94.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
